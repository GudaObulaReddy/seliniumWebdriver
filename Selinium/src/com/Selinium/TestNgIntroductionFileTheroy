TestNG ----->unit test framework.
TDD   -----test driven development
Purpose-----> design test cases in systematic way
---html reports
---diff annotations
--priorities/sequence
---dependency
--grouping 
---data provider



testng-- open source,free
jar files

-----java unit testing framework

install testng in eclipse:

   goto help button in eclipse:
                        -->goto install new software
                        --> enter url   https://dl.bintray.com/testng-team/testng-eclipse-release/6.14.3/
                        -->after enter process is going on next check the check box
                        --> next and accept the policy
                        --->  finish it and it will install allow anyway.
                        --->restart elipse
 start project:
  two ways 1st: one we can create in normal java project and after writing @Test --> hover add testnd libraries and import test
  second way: right click on project buldpath add library select testng library.
  
   //order of execution
	//setup system property for chrome       1.@BeforeSuite
	//launch chrome browser                  2.@BeforeTest
	//login to app							 3.@BeforeClass
	//enter url								 4.@BeforeMethod
	//google title test                      5.@Test
	//log out from app						 6.@AfterMethod
	//close Browser							 7.@AfterClass
	//delete all coockies                    8.@AfterTest
  
1.@BeforeSuite
2.@BeforeTest   before all test cases
3.@BeforeClass   
//pair these three are 4,5,6
 4.@BeforeMethod
 5.@Test                      
 6.@AfterMethod             
7.@AfterClass
 8.@AfterTest
 
 
 -------------------------------------------------------------
 @Test 
 the methods we wrote executed in random mannaer.....
  to get our required manner we go for ===========>>>>@Test(priority=1)<<<<<<<<<<=================
  
  ------------------------------------------------------------
 @Test are indipendent each  other
 -------------------------------------------------------------
 how to see the result:
       ---->1st way:=== we got direct in console and result of running googleTest 
       ---->2nd way:=== go to project and right click and click on refresh  the project then you will get one test output folder then go
                   to index.html page in that folder and right click goto properties copy location open chrome and paste that location
                   enter then you will get all results shown in particular order.
                   
 -------------------------------------------------------------
 for group wise means==@Test(groups= name): example===@Test(groups="Login")--> where ever we kept lochrogin those executed as group
 --------------------------------------------------------------
 depending of one class on another:--@Test(dependsOnMethods=method name of any one)  example==@Test(dependsOnMethods="LoginTest")--->here
  loginTest is the method name or testcase name which should executed first
  -------------------------------------------------------------
                     Repeated execution(invocation count)
                     syntax:
                        @Test(invocationCount = number)
                        example:
                         @Test(invocationCount = 10)
 ----------------------------------------------------------------------------------------------------------------------------------------------
 assermethods:======
 Assert.assertEquals(title, "Google","title is not matched");
 Assert.assertTrue(bool); or Assert.assertEquals(bool,true);
 ----------------------------------------------------------------------------------------------------------------------------------------------
 parametarization we can done at any level it may be suite level or test level---
 if you define it suite level we can acces at any class .if it is test level means only we can access in test level classes
 -----------------------------------------------------------------------------------------------------------------------------------------------
 dataprovider and liseners:::
 https://testng.org/doc/documentation-main.html
from Mohamed to everyone:
https://www.guru99.com/listeners-selenium-webdriver.html
---====================-----------------------=
                              Data driven framework excels sheeet
                              
                              
	//down load Apachi poi apis jars
	// down load bin distribution file jars and in that latest  one
	
	----------------------------------------------------------===================
	Maven::::::
	
	                                                          Maven –
Apache Maven is a software project management and build management tool for Java Frameworks.
1.Why Maven?
Central repository to get dependencies
Maintaining common structure across the organization
Flexibility in Integrating with CI tools
Plugins for Test framework execution.
2.Install Maven
3.Set System variables to recognize Maven
4.Understanding Maven terminologies
 Artifact: An artifact is a file, usually a JAR, that gets deployed to a Maven repository.
 GroupId: groupId will identify your project uniquely across all projects,
 archetype:generate ; Generates a new project from an archetype
5.Creating Maven Project
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

6.Integrate Maven with Eclipse
7.Maven Phases for Test Automation
8.Clean, compile, test
9.Understanding POM.xml file dependencies..
10.How to find the dependencies of the Softwares?
11.Importance of Maven Sure fire plugin
12.Running Tests with Surefireplugin
13.Integrating Testng into Maven
14.Testng xml files configuration in POM file
15.Setting up Profiles in POM.xml file
16.Running selected Tests only with Maven commands
17.Maven Sure fire reports
	----
	
to download in command promt:---->mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=
	maven-archetype-quickstart -DinteractiveMode=false-----> here my app is our wish to give any name.
Maven program:   
mvn -Dtest=LandingPageTest test --> run the test only for particular or single class
mvn test--> to run the test automatically or (mvn clean and mvn compile)

mvn profiling::::----->

pom.xml::::
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.google</groupId>
  <artifactId>google-search</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>google-search</name>
  <url>http://maven.apache.org</url>
  <profiles>
  <profile>
  <id>Regression</id>
   <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.19.1</version>
          <configuration>
          <suiteXmlFiles>
            <suiteXmlFile>testng1.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
        </plugin>
  </plugins>
    </pluginManagement>
  </build>
  </profile>
  <profile>
  <id>sanity</id>
   <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.19.1</version>
          <configuration>
          <suiteXmlFiles>
            <suiteXmlFile>testng.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
        </plugin>
  </plugins>
    </pluginManagement>
  </build>
  </profile>
  </profiles>
 
  <dependencies>
  <dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>3.6.0</version>
</dependency>
  <dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>6.11</version>
    <scope>test</scope>
</dependency>
<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
---------------------------
testng.xml::
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="com.google.SearchResultTest"/>
      <class name="com.google.LandingPageTest"/>
      <class name="com.google.AppTest"/>
      
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
--------------
test.ng1.xml::::::
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="com.google.SearchResultTest"/>
 
      
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
--------
commands to run on command promt:::::

mvn test -Psanity
mvn test -PRegression

-----------------------------------------------------------------------------
               retry logic in testng--TestNg Listeners
           
       1. @Testlevel
       2.Run Time  
         
     =================================================================
     
     log4j api 
      //types of logs
	//1.info
	//2.warn
	//3.error
	//4.fatal
	//how to generate log4j by using apachi api log4j and log4j.properties file
	//where to create create inside resource folder
      ================================================          

 age object model it is not a frame work here we are using data driven frame work
 
 page object model
    +
   data driven frame work
   +
   TestNg
   threse three we do project
   ===========
   
       jenkins
       1. go to chrome dowload jenkins war file 
       2.dowload latest version permanalink and its downloaded
       3.create one folder in c or d drive and copy that downloaded file
       4. goto cmd goto particular folder where we kept this jenkins.war file
       5.type command::::java -jar jenkins.war -->enter 
       6 it will install hat ever it want
       7.goto chrome type::::localhost:8080
       8.after that it will ask passoword eneter we got in cmd promt
       9.after that it will ask install suggested pluguns click that one
       10.after that goto create first admin user
       11fill details and give password
       12.click on save and finsh then u will get jenkins ready and start
       13.click on new item
       14.we want maven plugins so goto jenkins there we will get manage plugins then search for maven select all maven option
       and click on install and reastart
       15.go to jenkins click on new item select maven project give one name and click on ok
       16.give some discrioption
       17.source code management:::: select none
       18.root pom ::
          >>click on cofigure tool add maven and give any name save
           >>>>>goto eclipse and select pom.xml right click go to properties select path 
           paste in here
           goals and options::: clean install
        19.
        post build step::
        again go to manage plugins search for test ng
        select and install now againgo to our project and configure
        now in post build step we get publicsh testng report latesr give **/testing-results.xml in report pattren
        20.apply and save it 
        21.go to project click on bulid now you will get builds below and checks
        22.if you fix then any failures again click on build now
        23.you have so many option like add participants
            
            jenkins withn git repository
            
            1.first send our project to git repository and  download that code to our eclipse
            2.how click on that file in eclipse path 
            3.cmd goto that loaction type ls -a
            4.if make changes in our eclpise code  now 
            5.now how to check git repository status
            6.type in cmd ::-->git status
            7.type in cmd  ::-->git add .(now it will save all files)
            8.type in cmd: :-->git commit --m "added minor changes"
            9.type in cmd::-->git push origin master
            10 it will ask username and password give that one 
            11.do the jenkins steps like above told
            12.create new item select maven project 
            13.now source code select git
            14.add repository url
            15branch ::>>*/master   
            16.goal is::--> clean install
            17.post build steps :: publish test ng results save and apply
            18.click on build now
            19cmpleted
            20.generate extends reports how:::::--->
            go to cofigure in that jenkins project add public html results not testng 
            givepath test -
            index::output/Extent.html
            report files::::-->Extent HTML.Report
            scriprt console::System.setProperty("hudson.model.DirectoryBrowserSupport.CSP", "")
            
            save and now again build the project...
            you will get good attrative extend report
            
           
            
       
       
   
   
  